{"ast":null,"code":"import typeToReducer from \"type-to-reducer\";\nimport { SAVE_TODO, DELETE_TODO, IS_DONE, TOGGLE_EDIT, CHANGE_TODO } from \"../common/types\";\nconst initialState = {\n  todoList: []\n};\nexport const user = typeToReducer({\n  [SAVE_TODO]: (state, action) => ({ ...state,\n    todoList: [...state.todoList, {\n      id: state.todoList.length,\n      task: action.payload.task,\n      checked: false,\n      isEdit: false\n    }]\n  }),\n  [DELETE_TODO]: (state, action) => ({ ...state,\n    todoList: state.todoList.filter(item => action.payload.id !== item.id)\n  }),\n  [IS_DONE]: (state, action) => ({ ...state,\n    todoList: state.todoList.map(item => item.id === action.payload.id ? { ...item,\n      checked: action.payload.checked\n    } : item)\n  }),\n  [TOGGLE_EDIT]: (state, action) => ({ ...state,\n    todoList: state.todoList.map(item => item.id === action.payload.id ? { ...item,\n      isEdit: action.payload.isEdit\n    } : item)\n  }),\n  [CHANGE_TODO]: (state, action) => ({ ...state,\n    todoList: state.todoList.map(item => item.id === action.payload.id ? { ...item,\n      task: action.payload.task\n    } : item)\n  })\n}, initialState);\nexport default user;","map":{"version":3,"sources":["/Users/stasiu/Programowanie/todo-ts-redux/src/reducers/todo.ts"],"names":["typeToReducer","SAVE_TODO","DELETE_TODO","IS_DONE","TOGGLE_EDIT","CHANGE_TODO","initialState","todoList","user","state","action","id","length","task","payload","checked","isEdit","filter","item","map"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,iBAA1B;AACA,SAASC,SAAT,EAAoBC,WAApB,EAAiCC,OAAjC,EAA0CC,WAA1C,EAAuDC,WAAvD,QAA0E,iBAA1E;AAWA,MAAMC,YAAuB,GAAG;AAC9BC,EAAAA,QAAQ,EAAE;AADoB,CAAhC;AAKA,OAAO,MAAMC,IAAI,GAAGR,aAAa,CAC/B;AACE,GAACC,SAAD,GAAa,CAACQ,KAAD,EAAmBC,MAAnB,MAAoC,EAC/C,GAAGD,KAD4C;AAE/CF,IAAAA,QAAQ,EAAE,CACR,GAAGE,KAAK,CAACF,QADD,EAIR;AACEI,MAAAA,EAAE,EAAEF,KAAK,CAACF,QAAN,CAAeK,MADrB;AAEEC,MAAAA,IAAI,EAAEH,MAAM,CAACI,OAAP,CAAeD,IAFvB;AAGEE,MAAAA,OAAO,EAAE,KAHX;AAIEC,MAAAA,MAAM,EAAE;AAJV,KAJQ;AAFqC,GAApC,CADf;AAeE,GAACd,WAAD,GAAe,CAACO,KAAD,EAAmBC,MAAnB,MAAoC,EACjD,GAAGD,KAD8C;AAEjDF,IAAAA,QAAQ,EAAEE,KAAK,CAACF,QAAN,CAAeU,MAAf,CAAuBC,IAAD,IAAUR,MAAM,CAACI,OAAP,CAAeH,EAAf,KAAsBO,IAAI,CAACP,EAA3D;AAFuC,GAApC,CAfjB;AAmBE,GAACR,OAAD,GAAW,CAACM,KAAD,EAAmBC,MAAnB,MAAoC,EAC7C,GAAGD,KAD0C;AAE7CF,IAAAA,QAAQ,EAAEE,KAAK,CAACF,QAAN,CAAeY,GAAf,CAAoBD,IAAD,IAC3BA,IAAI,CAACP,EAAL,KAAYD,MAAM,CAACI,OAAP,CAAeH,EAA3B,GACI,EACE,GAAGO,IADL;AAEEH,MAAAA,OAAO,EAAEL,MAAM,CAACI,OAAP,CAAeC;AAF1B,KADJ,GAKIG,IANI;AAFmC,GAApC,CAnBb;AA8BE,GAACd,WAAD,GAAe,CAACK,KAAD,EAAmBC,MAAnB,MAAoC,EACjD,GAAGD,KAD8C;AAEjDF,IAAAA,QAAQ,EAAEE,KAAK,CAACF,QAAN,CAAeY,GAAf,CAAoBD,IAAD,IAC3BA,IAAI,CAACP,EAAL,KAAYD,MAAM,CAACI,OAAP,CAAeH,EAA3B,GACI,EACE,GAAGO,IADL;AAEEF,MAAAA,MAAM,EAAEN,MAAM,CAACI,OAAP,CAAeE;AAFzB,KADJ,GAKIE,IANI;AAFuC,GAApC,CA9BjB;AAyCE,GAACb,WAAD,GAAe,CAACI,KAAD,EAAmBC,MAAnB,MAAoC,EACjD,GAAGD,KAD8C;AAEjDF,IAAAA,QAAQ,EAAEE,KAAK,CAACF,QAAN,CAAeY,GAAf,CAAoBD,IAAD,IAAUA,IAAI,CAACP,EAAL,KAAYD,MAAM,CAACI,OAAP,CAAeH,EAA3B,GAAgC,EACrE,GAAGO,IADkE;AAErEL,MAAAA,IAAI,EAAEH,MAAM,CAACI,OAAP,CAAeD;AAFgD,KAAhC,GAGpCK,IAHO;AAFuC,GAApC;AAzCjB,CAD+B,EAmD/BZ,YAnD+B,CAA1B;AAsDP,eAAeE,IAAf","sourcesContent":["import typeToReducer from \"type-to-reducer\";\nimport { SAVE_TODO, DELETE_TODO, IS_DONE, TOGGLE_EDIT, CHANGE_TODO } from \"../common/types\";\n\ninterface stateTodo {\n  todoList: Array<{\n    id: number;\n    task: string;\n    checked: boolean;\n    isEdit: boolean;\n  }>;\n}\n\nconst initialState: stateTodo = {\n  todoList: [],\n  \n};\n\nexport const user = typeToReducer(\n  {\n    [SAVE_TODO]: (state: stateTodo, action: any) => ({\n      ...state,\n      todoList: [\n        ...state.todoList,\n        \n        \n        {\n          id: state.todoList.length,\n          task: action.payload.task,\n          checked: false,\n          isEdit: false,\n        },\n      ],\n    }),\n    [DELETE_TODO]: (state: stateTodo, action: any) => ({\n      ...state,\n      todoList: state.todoList.filter((item) => action.payload.id !== item.id),\n    }),\n    [IS_DONE]: (state: stateTodo, action: any) => ({\n      ...state,\n      todoList: state.todoList.map((item) =>\n        item.id === action.payload.id\n          ? {\n              ...item,\n              checked: action.payload.checked,\n            }\n          : item\n      ),\n    }),\n    [TOGGLE_EDIT]: (state: stateTodo, action: any) => ({\n      ...state,\n      todoList: state.todoList.map((item) =>\n        item.id === action.payload.id\n          ? {\n              ...item,\n              isEdit: action.payload.isEdit,\n            }\n          : item\n      ),\n    }),\n    [CHANGE_TODO]: (state: stateTodo, action: any) => ({\n      ...state,\n      todoList: state.todoList.map((item) => item.id === action.payload.id ? {\n        ...item,\n        task: action.payload.task,\n      }: item),\n      }),\n  },\n\n  initialState\n);\n\nexport default user;\n"]},"metadata":{},"sourceType":"module"}