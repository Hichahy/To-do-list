'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = typeToReducer;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// internal state
var typeDelimiter = '_';

// change the string separating action types when reducerMap is nested
var setTypeDelimiter = exports.setTypeDelimiter = function setTypeDelimiter(customTypeDelimiter) {
  return typeDelimiter = customTypeDelimiter;
};

// function to concatenate any nested types
var _makeType = function _makeType(prefix, type) {
  return prefix.concat(type).join(typeDelimiter);
};

// iterator function that will read the reducerMap and return a flattened object
var _flattenReducerMap = function _flattenReducerMap(reducers) {
  var initial = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

  var reducerTypes = Object.keys(reducers || {});
  return reducerTypes.reduce(function (acc, type) {
    var reducer = reducers[type];
    return typeof reducer === 'function' ? _extends({}, acc, _defineProperty({}, _makeType(prefix, type), reducer)) : _flattenReducerMap(reducer, acc, [_makeType(prefix, type)]);
  }, initial);
};

function typeToReducer(reducerMap, initialState) {
  var flattened = _flattenReducerMap(reducerMap);

  return function () {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
    var action = arguments[1];

    var reducer = flattened[action.type];
    return reducer ? reducer(state, action) : state;
  };
}