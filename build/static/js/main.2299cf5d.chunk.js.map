{"version":3,"sources":["components/List.tsx","common/types.ts","components/index.ts","actions/todo.ts","reducers/todo.ts","reducers/index.ts","store.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["List","todoList","saveTodo","deleteTodo","isDone","toggleEdit","changeTodo","useState","text","setText","className","placeholder","type","value","onChange","e","target","trim","onClick","console","log","map","item","checked","isEdit","task","id","style","display","flexDirection","SAVE_TODO","DELETE_TODO","IS_DONE","TOGGLE_EDIT","CHANGE_TODO","connect","state","todo","dispatch","payload","err","user","typeToReducer","action","length","filter","combineReducers","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2299cf5d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./List.scss\";\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\n\ninterface IProps {\n  todoList: Array<{\n    id: number;\n    task: string;\n    checked: boolean;\n    isEdit: boolean;\n  }>;\n  saveTodo: (task: string) => void;\n  deleteTodo: (id: number) => void;\n  isDone: (id: number, checked: boolean) => void;\n  toggleEdit: (id: number, isEdit: boolean) => void;\n  changeTodo: (id: number, task: string) => void;\n}\n\nconst List = ({\n  todoList,\n  saveTodo,\n  deleteTodo,\n  isDone,\n  toggleEdit,\n  changeTodo,\n}: IProps) => {\n  const [text, setText] = useState(\"\");\n\n  const addTodo = () => {\n    console.log(`adding ${text}`);\n    saveTodo(text);\n    setText(\"\");\n  };\n\n  return (\n    <div className=\"list-wrapper\">\n      <div className=\"tittle-box\">\n        <div className=\"TODO_h1\">\n          <h1 className=\"rotate\">To</h1>\n          <h1 className=\"rotate_do\">Do</h1>\n        </div>\n        <h1>List</h1>\n      </div>\n      <div className=\"list-box\">\n        <div className=\"add-section\">\n          <input\n            placeholder=\"ADD YOUR TASK\"\n            className=\"add-input\"\n            type=\"text\"\n            value={text}\n            onChange={(e) => setText(e.target.value)}\n          />\n          <div className=\"add-button\">\n            {text.trim() === \"\" ? (\n              <i className=\"bi bi-plus-circle\"></i>\n            ) : (\n              <i onClick={addTodo} className=\"bi-plus-circle-fill\"></i>\n            )}\n          </div>\n        </div>\n        <div className=\"task-container\">\n          <div className=\"task-box\">\n            {todoList.map((item) => (\n              <div className=\"task-item\" key={item.id}>\n                <span className={item.checked ? \"done\" : \"task\"}>\n                  {item.isEdit ? (\n                    <input\n                      type=\"text\"\n                      value={item.task}\n                      onChange={(e) => changeTodo(item.id, e.target.value)}\n                    />\n                  ) : (\n                    item.task\n                  )}\n                </span>\n                <div style={{display:\"flex\", flexDirection:\"inherit\"}}>\n                  <div onClick={() => toggleEdit(item.id, item.isEdit)}>\n                    <i\n                      className={!item.isEdit ? \"bi bi-pen\" : \"bi bi-pen-fill\"}\n                    ></i>\n                  </div>\n\n                  <div onClick={() => isDone(item.id, !item.checked)}>\n                    <i\n                      className={\n                        item.checked\n                          ? \"bi bi-check-circle-fill\"\n                          : \"bi bi-check-circle\"\n                      }\n                    ></i>\n                  </div>\n                  <div onClick={() => deleteTodo(item.id)}>\n                    <i className=\"bi bi-trash2 \"></i>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default List;\n","export const SAVE_TODO = \"SAVE_TODO\";\nexport const DELETE_TODO = \"DELETE_TODO\";\nexport const IS_DONE = \"IS_DONE\";\nexport const TOGGLE_EDIT = \"TOGGLE_EDIT\";\nexport const CHANGE_TODO = \"CHANGE_TODO\";\n","import { connect } from \"react-redux\";\nimport todoList from \"./List\";\nimport {\n  saveTodo,\n  deleteTodo,\n  isDone,\n  toggleEdit,\n  changeTodo,\n} from \"../actions/todo\";\nimport { IStore } from \"../types/IStore\";\n\nconst mapStateToProps = (state: IStore) => ({\n  todoList: state.todo.todoList,\n});\n\nexport default connect(mapStateToProps, {\n  saveTodo,\n  deleteTodo,\n  isDone,\n  toggleEdit,\n  changeTodo,\n})(todoList as any);\n","import {\n  SAVE_TODO,\n  DELETE_TODO,\n  IS_DONE,\n  TOGGLE_EDIT,\n  CHANGE_TODO,\n} from \"../common/types\";\n\nexport const saveTodo = (task: string) => (dispatch: any) => {\n  try {\n    dispatch({\n      type: SAVE_TODO,\n      payload: { task },\n    });\n  } catch (err) {\n    console.log(`err`, err);\n  }\n};\n\nexport const deleteTodo = (id: number) => (dispatch: any) => {\n  try {\n    dispatch({\n      type: DELETE_TODO,\n      payload: { id },\n    });\n  } catch (err) {\n    console.log(`err`, err);\n  }\n};\n\nexport const isDone = (id: number, checked: boolean) => (dispatch: any) => {\n  try {\n    dispatch({\n      type: IS_DONE,\n      payload: { id, checked },\n    });\n  } catch (err) {\n    console.log(`err`, err);\n  }\n};\n\nexport const toggleEdit = (id: number, isEdit: boolean) => (dispatch: any) => {\n  try {\n    dispatch({\n      type: TOGGLE_EDIT,\n      payload: { id, isEdit: !isEdit },\n    });\n  } catch (err) {\n    console.log(`err`, err);\n  }\n};\n\nexport const changeTodo = (id: number, task: string) => (dispatch: any) => {\n  try {\n    dispatch({\n      type: CHANGE_TODO,\n      payload: { id, task },\n    });\n  } catch (err) {\n    console.log(`err`, err);\n  }\n};\n","import typeToReducer from \"type-to-reducer\";\nimport {\n  SAVE_TODO,\n  DELETE_TODO,\n  IS_DONE,\n  TOGGLE_EDIT,\n  CHANGE_TODO,\n} from \"../common/types\";\n\ninterface stateTodo {\n  todoList: Array<{\n    id: number;\n    task: string;\n    checked: boolean;\n    isEdit: boolean;\n  }>;\n}\n\nconst initialState: stateTodo = {\n  todoList: [],\n};\n\nexport const user = typeToReducer(\n  {\n    [SAVE_TODO]: (state: stateTodo, action: any) => ({\n      ...state,\n      todoList: [\n        ...state.todoList,\n\n        {\n          id: state.todoList.length,\n          task: action.payload.task,\n          checked: false,\n          isEdit: false,\n        },\n      ],\n    }),\n    [DELETE_TODO]: (state: stateTodo, action: any) => ({\n      ...state,\n      todoList: state.todoList.filter((item) => action.payload.id !== item.id),\n    }),\n    [IS_DONE]: (state: stateTodo, action: any) => ({\n      ...state,\n      todoList: state.todoList.map((item) =>\n        item.id === action.payload.id\n          ? {\n              ...item,\n              checked: action.payload.checked,\n            }\n          : item\n      ),\n    }),\n    [TOGGLE_EDIT]: (state: stateTodo, action: any) => ({\n      ...state,\n      todoList: state.todoList.map((item) =>\n        item.id === action.payload.id\n          ? {\n              ...item,\n              isEdit: action.payload.isEdit,\n            }\n          : item\n      ),\n    }),\n    [CHANGE_TODO]: (state: stateTodo, action: any) => ({\n      ...state,\n      todoList: state.todoList.map((item) =>\n        item.id === action.payload.id\n          ? {\n              ...item,\n              task: action.payload.task,\n            }\n          : item\n      ),\n    }),\n  },\n\n  initialState\n);\n\nexport default user;\n","import { combineReducers } from \"redux\";\r\nimport todo from \"./todo\";\r\n\r\nexport default combineReducers({\r\n  todo,\r\n});\r\n","import { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\n\nconst initialState = {} as any;\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(...middleware))\n);\n\nexport default store;\n","import React from \"react\";\nimport \"./App.css\";\nimport List from \"./components\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <List />\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}